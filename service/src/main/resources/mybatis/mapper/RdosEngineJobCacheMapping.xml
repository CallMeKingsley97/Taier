<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.engine.service.db.mapper.RdosEngineJobCacheMapper">
	
	<resultMap id="rdosEngineJobCacheResult" type="com.dtstack.engine.service.db.dataobject.RdosEngineJobCache">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
        <result column="is_deleted" property="isDeleted" jdbcType="INTEGER" />
        <result column="job_id" property="jobId" jdbcType="VARCHAR" />
        <result column="job_info" property="jobInfo" jdbcType="VARCHAR" />
        <result column="engine_type" property="engineType" jdbcType="VARCHAR"/>
        <result column="compute_type" property="computeType" jdbcType="INTEGER"/>
        <result column="node_address" property="nodeAddress" jdbcType="VARCHAR"/>
        <result column="job_name" property="jobName" jdbcType="VARCHAR"/>
        <result column="stage" property="stage" jdbcType="INTEGER"/>
        <result column="job_priority" property="jobPriority" jdbcType="BIGINT"/>
        <result column="group_name" property="groupName" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insert">
        insert into rdos_engine_job_cache( job_id, engine_type, compute_type, stage, job_info, node_address, job_name, job_priority, group_name)
        values(#{jobId}, #{engineType}, #{computeType}, #{stage}, #{jobInfo}, #{nodeAddress},#{jobName},#{jobPriority},#{groupName});
    </insert>

    <delete id="delete">
        delete from rdos_engine_job_cache where job_id=#{jobId}
    </delete>

    <delete id="deleteByJobIds">
        delete from rdos_engine_job_cache
        where job_id in
        <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
            #{jobId}
        </foreach>
    </delete>

    <select id="getOne" resultMap="rdosEngineJobCacheResult">
        select * from rdos_engine_job_cache where job_id=#{jobId} and is_deleted=0 order by gmt_create desc limit 1;
    </select>

    <update id="updateStage">
        update rdos_engine_job_cache
        set node_address = #{nodeAddress}, stage = #{stage}, job_priority = #{jobPriority}, group_name = #{groupName}, gmt_modified=now()
        where job_id = #{jobId}
    </update>

    <select id="listByStage" resultMap="rdosEngineJobCacheResult">
        select * from rdos_engine_job_cache
        where id > #{startId}
        <if test="nodeAddress != null">
            and (node_address = #{nodeAddress} or node_address is null)
        </if>
        <if test="stage != null">
            and stage = #{stage}
        </if>
        <if test="engineType != null">
            and engine_type = #{engineType}
        </if>
        <if test="groupName != null">
            and group_name = #{groupName}
        </if>
        and is_deleted=0
        order by id asc
        limit 500;
    </select>

    <select id="getByJobIds" resultMap="rdosEngineJobCacheResult">
        select * from rdos_engine_job_cache
        WHERE job_id in
        <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
            #{jobId}
        </foreach>
        and is_deleted=0
    </select>

    <select id="listNames" resultType="java.lang.String">
        select job_name from rdos_engine_job_cache
        where job_name like '%${jobName}%' and is_deleted=0;
    </select>

    <select id="countByStage" resultType="java.lang.Integer">
        select count(1) from rdos_engine_job_cache
        where engine_type = #{engineType} and group_name = #{groupName} and node_address = #{nodeAddress}
        <if test="stages != null">
            and stage in
            <foreach collection="stages" item="stage" open="(" separator="," close=")">
                #{stage}
            </foreach>
        </if>
        and is_deleted=0;
    </select>

    <select id="maxPriorityByStage" resultType="java.lang.Long">
        select max(job_priority) from rdos_engine_job_cache
        where  engine_type = #{engineType} and group_name = #{groupName} and node_address = #{nodeAddress}
        <if test="stage != null">
            and stage = #{stage}
        </if>
        and is_deleted=0;
    </select>

    <select id="getAllNodeAddress" resultType="java.lang.String">
        SELECT DISTINCT(node_address) as nodeAddress
        FROM rdos_engine_job_cache
        WHERE is_deleted = 0
    </select>

    <select id="countByJobResource" resultType="java.lang.Long">
        SELECT
        count(1) as count
        FROM rdos_engine_job_cache
        WHERE engine_type = #{engineType} and group_name = #{groupName} and stage = #{stage} and is_deleted = 0
        <if test="nodeAddress != null">
            and node_address = #{nodeAddress}
        </if>
    </select>

    <select id="listByJobResource" resultMap="rdosEngineJobCacheResult">
        SELECT * FROM rdos_engine_job_cache
        WHERE engine_type = #{engineType} and group_name = #{groupName} and stage = #{stage} and is_deleted = 0
        <if test="nodeAddress != null">
            and node_address = #{nodeAddress}
        </if>
        order by stage desc, job_priority asc
        limit #{start} , #{pageSize}
    </select>

    <select id="getJobResources" resultType="java.lang.String">
        SELECT DISTINCT(CONCAT(engine_type, '_', group_name)) as jobResource
        FROM rdos_engine_job_cache
        WHERE is_deleted = 0
    </select>

    <select id="groupByJobResource" resultType="java.util.HashMap">
        SELECT
        engine_type as engineType,
        group_name as groupName,
        stage as stage,
        unix_timestamp(min(gmt_create)) as generateTime,
        count(1) as jobSize
        FROM rdos_engine_job_cache
        WHERE is_deleted = 0
        <if test="nodeAddress != null">
            and node_address = #{nodeAddress}
        </if>
        group by engine_type, group_name, stage
        order by engine_type, group_name, stage asc
    </select>
</mapper>
