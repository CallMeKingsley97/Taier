akka {
  daemonic = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = true

  serialize-messages = off

  loglevel = "INFO"
  stdout-loglevel = OFF

  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  actor {
    warn-about-java-serializer-usage = off
    default-dispatcher {
      throughput = 15
    }

    provider = "akka.remote.RemoteActorRefProvider"

    serialize-messages = on
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "com.google.protobuf.Message" = proto
      "com.google.protobuf.GeneratedMessage" = proto
      "com.dtstack.engine.common.akka.message.WorkerInfo" = java
      "com.dtstack.engine.common.akka.message.MessageContainerInfos" = java
      "com.dtstack.engine.common.akka.message.MessageGetCheckpoints" = java
      "com.dtstack.engine.common.akka.message.MessageGetEngineLog" = java
      "com.dtstack.engine.common.akka.message.MessageGetEngineMessageByHttp" = java
      "com.dtstack.engine.common.akka.message.MessageGetJobMaster" = java
      "com.dtstack.engine.common.akka.message.MessageGetJobStatus" = java
      "com.dtstack.engine.common.akka.message.MessageJudgeSlots" = java
      "com.dtstack.engine.common.akka.message.MessageStopJob" = java
      "com.dtstack.engine.common.akka.message.MessageSubmitJob" = java
      "com.dtstack.engine.common.pojo.JobResult" = java
      "com.dtstack.engine.common.JobClient" = java
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]

    startup-timeout = "100 s"

    transport-failure-detector {
      acceptable-heartbeat-pause = "6000 s"
      heartbeat-interval = "1000 s"
      threshold = 300.0
    }

    watch-failure-detector {
      heartbeat-interval = "10 s"
      acceptable-heartbeat-pause = "60 s"
      threshold = 12
    }

    netty {
      tcp {
        transport-class = "akka.remote.transport.netty.NettyTransport"
        maximum-frame-size = "10485760b"
        tcp-nodelay = on

        client-socket-worker-pool {
          pool-size-min = 1
          pool-size-max = 2
          pool-size-factor = 1.0
        }

        server-socket-worker-pool {
          pool-size-min = 1
          pool-size-max = 2
          pool-size-factor = 1.0
        }
      }
    }

    log-remote-lifecycle-events = false

    retry-gate-closed-for = "50 ms"
  }
}