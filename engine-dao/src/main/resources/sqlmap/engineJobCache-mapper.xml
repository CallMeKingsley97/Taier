<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dtstack.engine.dao.EngineJobCacheDao">

    <insert id="insert" parameterType="EngineJobCache" useGeneratedKeys="true" keyProperty="id">
        insert into rdos_engine_job_cache( job_id, engine_type, compute_type, stage, job_info, node_address, job_name, job_priority, group_name)
        values(#{jobId}, #{engineType}, #{computeType}, #{stage}, #{jobInfo}, #{nodeAddress},#{jobName},#{jobPriority},#{groupName});
    </insert>

    <delete id="delete">
        delete from rdos_engine_job_cache where job_id=#{jobId}
    </delete>

    <select id="getOne" resultType="EngineJobCache">
        select * from rdos_engine_job_cache where job_id=#{jobId} and is_deleted=0 order by gmt_create desc limit 1;
    </select>

    <update id="updateStage">
        update rdos_engine_job_cache
        set node_address = #{nodeAddress}, stage = #{stage}, job_priority = #{jobPriority}, group_name = #{groupName}, gmt_modified=now()
        where job_id = #{jobId}
    </update>

    <select id="listByStage" resultType="EngineJobCache">
        select * from rdos_engine_job_cache
        where id > #{startId} and (node_address = #{nodeAddress} or node_address is null)
        <if test="stage != null">
            and stage = #{stage}
        </if>
        <if test="engineType != null">
            and engine_type = #{engineType}
        </if>
        and is_deleted=0
        order by id, job_priority asc
        limit 500;
    </select>

    <select id="getByJobIds" resultType="EngineJobCache">
        select * from rdos_engine_job_cache
        WHERE job_id in
        <foreach collection="jobIds" item="jobId" open="(" separator="," close=")">
            #{jobId}
        </foreach>
        and is_deleted=0
    </select>

    <select id="listNames" resultType="java.lang.String">
        select job_name from rdos_engine_job_cache
        where job_name like '%${jobName}%' and compute_type = #{computeType}
        and stage = 1 and is_deleted=0;
    </select>

    <select id="countByStage" resultType="java.lang.Integer">
        select count(1) from rdos_engine_job_cache
        where group_name = #{groupName} and node_address = #{nodeAddress}
        <if test="stages != null">
            and stage in
            <foreach collection="stages" item="stage" open="(" separator="," close=")">
                #{stage}
            </foreach>
        </if>
        and is_deleted=0;
    </select>

    <select id="maxPriorityByStage" resultType="java.lang.Long">
        select max(job_priority) from rdos_engine_job_cache
        where group_name = #{groupName} and node_address = #{nodeAddress}
        <if test="stage != null">
            and stage = #{stage}
        </if>
        and is_deleted=0;
    </select>

    <select id="getAllNodeAddress" resultType="java.lang.String">
        SELECT DISTINCT(node_address) as nodeAddress
        FROM rdos_engine_job_cache
        WHERE is_deleted = 0
    </select>

    <update id="updateNodeAddress">
        UPDATE
        rdos_engine_job_cache
        set node_address = #{nodeAddress}, is_failover = 1
        WHERE job_id IN
        <foreach item="jobId" index="index" collection="jobIds" open="(" separator="," close=")">
            #{jobId}
        </foreach>
    </update>

    <select id="listByFailover" resultType="EngineJobCache">
        select * from rdos_engine_job_cache
        where id > #{startId} and is_failover = 1
        and (node_address = #{nodeAddress} or node_address is null)
        and is_deleted=0
        order by id, job_priority asc
        limit 500;
    </select>
</mapper>
